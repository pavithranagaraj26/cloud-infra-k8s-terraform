AWSTemplateFormatVersion: "2010-09-09"
Description: VPC with public and private subnets and bastion host

#-------------------------------------------------------------------------------
#--[ PARAMETRES ]---------------------------------------------------------------
#-------------------------------------------------------------------------------

Parameters:
  AMI:
    Description: AMI
    Type: String

  Env:
    Description: Environment name (dev/staging/preprod/prod)
    Type: String

  Hostname:
    Description: "Hostname for Bastion, good practice is 'client-env-bastion'"
    Type: String
    Default: bastion

  InstanceType:
    Description: Instance type
    Type: String

  KeyName:
    Description: SSH key name to access to the Bastion
    Type: String

  NetdataUUID:
    Description: Netdata UUID for stream from slaves (ecs-nodes)
    Type: String

  Prefix:
    Description: Prefix to all resources
    Type: String

  PrivateSubnetsCidr:
    Description: "Comma delimited list of 3 private subnets CIDR. (ex: 10.0.10.0/24,10.0.11.0/24,10.0.12.0/24)"
    Type: CommaDelimitedList

  PublicSubnetsCidr:
    Description: "Comma delimited list of 3 public subnets CIDR. (ex: 10.0.0.0/24,10.0.1.0/24,10.0.2.0/24)"
    Type: CommaDelimitedList

  VpcCidr:
    Description: VPC CIDR (/16)
    Type: String

#-------------------------------------------------------------------------------
#--[ RESOURCES ]----------------------------------------------------------------
#-------------------------------------------------------------------------------

Resources:

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: True
      EnableDnsHostnames: True
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}
        - Key: Env
          Value: !Ref Env

  # CIDR Block IPv6
  Ipv6VPCCidrBlock:
    Type: "AWS::EC2::VPCCidrBlock"
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref VPC

  # Internet Gateway
  Igw:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}
        - Key: Env
          Value: !Ref Env

  IgwAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref Igw
      VpcId: !Ref VPC

  Eigw:
    Type: "AWS::EC2::EgressOnlyInternetGateway"
    Properties:
      VpcId: !Ref VPC

  # Subnets publics
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Select [ 0, !Ref PublicSubnetsCidr ]
      MapPublicIpOnLaunch: True
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-public-a
        - Key: Env
          Value: !Ref Env

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Select [ 1, !Ref PublicSubnetsCidr ]
      MapPublicIpOnLaunch: True
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-public-b
        - Key: Env
          Value: !Ref Env

  PublicSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: !Select [ 2, !Ref PublicSubnetsCidr ]
      MapPublicIpOnLaunch: True
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-public-c
        - Key: Env
          Value: !Ref Env

  # Subnets privates
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: !Select [ 0, !Ref PrivateSubnetsCidr ]
      MapPublicIpOnLaunch: False
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-private-a
        - Key: Env
          Value: !Ref Env

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 1, !GetAZs ]
      CidrBlock: !Select [ 1, !Ref PrivateSubnetsCidr ]
      MapPublicIpOnLaunch: False
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-private-b
        - Key: Env
          Value: !Ref Env

  PrivateSubnet3:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select [ 2, !GetAZs ]
      CidrBlock: !Select [ 2, !Ref PrivateSubnetsCidr ]
      MapPublicIpOnLaunch: False
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-private-c
        - Key: Env
          Value: !Ref Env

  # Route Tables
  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-public
        - Key: Env
          Value: !Ref Env

  RouteTablePrivate1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-private-a
        - Key: Env
          Value: !Ref Env

  RouteTablePrivate2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-private-b
        - Key: Env
          Value: !Ref Env

  RouteTablePrivate3:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-private-c
        - Key: Env
          Value: !Ref Env

  # Route Tables Associations
  PublicSubnet1Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet2

  PublicSubnet3Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnet3

  PrivateSubnet1Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3Association:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePrivate3
      SubnetId: !Ref PrivateSubnet3

  # Endpoint S3
  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref RouteTablePrivate1
        - !Ref RouteTablePrivate2
        - !Ref RouteTablePrivate3
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref VPC

  # Cr√©ation des NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway3EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3

  # Public Routes
  PublicDefaultRoute:
    Type: "AWS::EC2::Route"
    DependsOn: Igw
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref Igw

  PublicDefaultRouteV6:
    Type: "AWS::EC2::Route"
    DependsOn: Igw
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationIpv6CidrBlock: "::/0"
      GatewayId: !Ref Igw

  # Private Routes
  Private1DefaultRoute:
    Type: "AWS::EC2::Route"
    DependsOn: Igw
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  Private1DefaultRouteV6:
    Type: "AWS::EC2::Route"
    DependsOn: Eigw
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      DestinationIpv6CidrBlock: "::/0"
      EgressOnlyInternetGatewayId: !Ref Eigw

  Private2DefaultRoute:
    Type: "AWS::EC2::Route"
    DependsOn: Igw
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  Private2DefaultRouteV6:
    Type: "AWS::EC2::Route"
    DependsOn: Eigw
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      DestinationIpv6CidrBlock: "::/0"
      EgressOnlyInternetGatewayId: !Ref Eigw

  Private3DefaultRoute:
    Type: "AWS::EC2::Route"
    DependsOn: Igw
    Properties:
      RouteTableId: !Ref RouteTablePrivate3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway3
  Private3DefaultRouteV6:
    Type: "AWS::EC2::Route"
    DependsOn: Eigw
    Properties:
      RouteTableId: !Ref RouteTablePrivate3
      DestinationIpv6CidrBlock: "::/0"
      EgressOnlyInternetGatewayId: !Ref Eigw

  # Default Security Group
  DefaultSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${Prefix}-${Env}-default
      GroupDescription: Created by CloudFormation
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-default
        - Key: Env
          Value: !Ref Env

  # Bastion Security Group
  BastionSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub ${Prefix}-${Env}-bastion
      GroupDescription: Created by CloudFormation
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${Env}-bastion
        - Key: Env
          Value: !Ref Env

#-------------------------------------------------------------------------------
#--[ Bastion ]------------------------------------------------------------------
#-------------------------------------------------------------------------------

  ControlPortAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  AssociateControlPort:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt ControlPortAddress.AllocationId
      NetworkInterfaceId: !Ref controlXface
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
  controlXface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet1
      Description: Interface for controlling traffic such as SSH
      GroupSet:
      - !Ref BastionSG
      SourceDestCheck: true
      Tags:
        -
          Key: Network
          Value: Control

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 128
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref controlXface
          DeviceIndex: 0
      Tags:
        -
          Key: Name
          Value: !Ref Hostname
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          setHostname="${Hostname}.`ec2metadata --instance-id`"
          hostname $setHostname
          echo "$setHostname" > /etc/hostname
          sed -i "s/127.0.0.1 localhost/127.0.0.1 localhost $setHostname/g" /etc/hosts
          apt-get update -y
          apt-get install -y cloud-guest-utils curl gatling git htop mc ncdu python python-pip zsh
          pip install --upgrade awscli
          pip install --upgrade https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /usr/local/bin/cfn-init --stack ${AWS::StackName} --resource Ec2Instance --region ${AWS::Region}
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_download_netdata:
              command: curl https://my-netdata.io/kickstart-static64.sh >/tmp/kickstart-static64.sh
            02_install_netdata:
              command: sh /tmp/kickstart-static64.sh --dont-wait
            03_download_prometheus:
              command: wget https://github.com/prometheus/prometheus/releases/download/v1.7.2/prometheus-1.7.2.linux-amd64.tar.gz -O /opt/prometheus.tar.gz
            04_install_prometheus:
              command: |
                mkdir /opt/prometheus
                tar zxfv /opt/prometheus.tar.gz -C /opt/prometheus --strip=1
                useradd -r -d /opt/prometheus -M prometheus
                chown -R prometheus:prometheus /opt/prometheus
            05_enable_prometheus:
              command: "systemctl enable prometheus"
            06_start_prometheus:
              command: "systemctl start prometheus"
          files:
            "/opt/netdata/etc/netdata/netdata.conf":
              content: |
                [global]
                  memory mode = ram
                [health]
                  enabled = no
            "/opt/netdata/etc/netdata/stream.conf":
              content: !Sub |
                [${NetdataUUID}]
                  enabled = yes
                  allow from = *
                  default history = 3600
                  default memory mode = ram
                  health enabled by default = auto
                  default postpone alarms on connect seconds = 60
            "/opt/prometheus/prometheus.yml":
              content: |
                global:
                  scrape_interval:     5s
                  evaluation_interval: 5s
                  external_labels:
                    monitor: 'codelab-monitor'
                rule_files:
                scrape_configs:
                  - job_name: 'prometheus'
                    static_configs:
                      - targets: ['0.0.0.0:9090']
                  - job_name: 'netdata-scrape'
                    metrics_path: '/api/v1/allmetrics'
                    params:
                      format: [prometheus_all_hosts]
                    honor_labels: true
                    static_configs:
                      - targets: ['127.0.0.1:19999']
            "/etc/systemd/system/prometheus.service":
              content: |
                [Unit]
                Description=Prometheus Server
                AssertPathExists=/opt/prometheus

                [Service]
                Type=simple
                WorkingDirectory=/opt/prometheus
                User=prometheus
                Group=prometheus
                ExecStart=/opt/prometheus/prometheus --config.file=/opt/prometheus/prometheus.yml --log.level=info
                ExecReload=/bin/kill -SIGHUP $MAINPID
                ExecStop=/bin/kill -SIGINT $MAINPID

                [Install]
                WantedBy=multi-user.target
          services:
            sysvinit:
              netdata:
                enabled: true
                ensureRunning: true

#-------------------------------------------------------------------------------
#--[ OUTPUTS/EXPORT ]-----------------------------------------------------------
#-------------------------------------------------------------------------------

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${Prefix}-${Env}-VPCid

  Env:
    Description: Env
    Value: !Ref Env
    Export:
      Name: !Sub ${Prefix}-Env

  Prefix:
    Description: Env
    Value: !Ref Prefix
    Export:
      Name: !Sub ${Prefix}-Prefix

  KeyName:
    Description: KeyName
    Value: !Ref KeyName
    Export:
      Name: !Sub ${Prefix}-${Env}-KeyName

  NetdataUUID:
    Description: NetdataUUID
    Value: !Ref NetdataUUID
    Export:
      Name: !Sub ${Prefix}-${Env}-NetdataUUID

  PublicSubnet1:
    Description: Public subnet 1
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub ${Prefix}-${Env}-PublicSubnet1

  PublicSubnet2:
    Description: Public subnet 2
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub ${Prefix}-${Env}-PublicSubnet2

  PublicSubnet3:
    Description: Public subnet 3
    Value: !Ref PublicSubnet3
    Export:
      Name: !Sub ${Prefix}-${Env}-PublicSubnet3

  PrivateSubnet1:
    Description: Private subnet 1
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub ${Prefix}-${Env}-PrivateSubnet1

  PrivateSubnet2:
    Description: Private subnet 2
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub ${Prefix}-${Env}-PrivateSubnet2

  PrivateSubnet3:
    Description: Private subnet 3
    Value: !Ref PrivateSubnet3
    Export:
      Name: !Sub ${Prefix}-${Env}-PrivateSubnet3

  DefaultSG:
    Description: Default Security Group
    Value: !Ref DefaultSG
    Export:
      Name: !Sub ${Prefix}-${Env}-DefaultSG

  BastionSG:
    Description: Bastion Security Group
    Value: !Ref BastionSG
    Export:
      Name: !Sub ${Prefix}-${Env}-BastionSG

  BastionId:
    Description: Bastion EC2 instance ID
    Value: !Ref Ec2Instance
    Export:
      Name: !Sub ${Prefix}-${Env}-BastionId

  BastionPrivateIp:
    Description: Bastion private IP
    Value: !GetAtt Ec2Instance.PrivateIp
    Export:
      Name: !Sub ${Prefix}-${Env}-BastionPrivateIp

  BastionPublicIp:
    Description: Bastion public IP
    Value: !GetAtt Ec2Instance.PublicIp
    Export:
      Name: !Sub ${Prefix}-${Env}-BastionPublicIp
